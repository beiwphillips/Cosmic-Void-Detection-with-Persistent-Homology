from __future__ import divisionimport numpy as npimport osimport matplotlib.pyplot as pltimport json## Real data:"""file_name = "real"x = 24y = 25z = 152"""##  Simulation data:"""file_name = "simulation"x = 24y = 27z = 115"""## Real-original data:file_name = ""x = 150y = 150z = 150## Real-shuffled data:"""file_name = "real-shuffled2"x = 24y = 24z = 151"""PRECISION=10**4DATA_DIR = ""PD_DIR = "./PD"PLOT_DIR = "./Plot"def make_dir(new_dir):    if not os.path.exists(new_dir):        os.makedirs(new_dir)def recover_scaler(n, maxv):    return maxv-(n-1)/PRECISIONdef get_idx_1D_from_3D(density, array, pos):    return np.unravel_index(np.ravel_multi_index(pos, density.shape),array.shape)def IsLocalMin(idx, M):    tmp = []    if idx[0]-1>=0:        if M[idx[0]-1, idx[1], idx[2]]>-1:            tmp.append(M[idx[0]-1, idx[1], idx[2]])    if idx[0]+1<x:        if M[idx[0]+1, idx[1], idx[2]]>-1:            tmp.append(M[idx[0]+1, idx[1], idx[2]])    if idx[1]-1>=0:        if M[idx[0], idx[1]-1, idx[2]]>-1:            tmp.append(M[idx[0], idx[1]-1, idx[2]])    if idx[1]+1<y:        if M[idx[0], idx[1]+1, idx[2]]>-1:            tmp.append(M[idx[0], idx[1]+1, idx[2]])    if idx[2]-1>=0:        if M[idx[0], idx[1], idx[2]-1]>-1:          tmp.append(M[idx[0], idx[1], idx[2]-1])    if idx[2]+1<z:        if M[idx[0], idx[1], idx[2]+1]>-1:            tmp.append(M[idx[0], idx[1], idx[2]+1])    if len(set(tmp))==0:        return [1, 0]    if len(set(tmp))==1:        return [0, tmp[0]]    else:        return [-1, sorted(list(set(tmp)))]def update_IsIter(M, m, n):    M[M==m]=n    return M    def generate_json_Bars(file_name):    input_file = os.path.join(DATA_DIR, "map"+file_name+".bin")    xbash = np.fromfile(input_file, dtype=np.float64)    #print xbash.shape    minv = min(xbash)    maxv = max(xbash)    array = ((maxv-xbash)*PRECISION+1).astype(int)    density = array.reshape((x, y, z))    Vals = list(sorted(set(list(array))))    IsIter = np.zeros((x, y, z)).astype(int)-1    MT=[]    CCcnt = 0    for i in range(0, len(Vals)):        print("-------"+str(i*100/len(Vals))+"---------------")        tmps = np.argwhere(density==Vals[i])        for j in range(0, len(tmps)):            idx = list(tmps[j])            type_info, cltrs = IsLocalMin(idx, IsIter)            if type_info == 1:                IsIter[idx[0], idx[1], idx[2]] = CCcnt                MT.append({"id": -1, "birth": Vals[i], "death": -9999, "menbers": [get_idx_1D_from_3D(density, array, tuple(idx))[0]], "co-CC":{}})                MT[CCcnt]["co-CC"][str("{:.9f}".format(recover_scaler(Vals[i], maxv)))] = MT[CCcnt]["menbers"][:]                CCcnt += 1            if type_info == 0:                IsIter[idx[0], idx[1], idx[2]] = cltrs                MT[cltrs]["menbers"].append(get_idx_1D_from_3D(density, array, tuple(idx))[0])                MT[cltrs]["co-CC"][str("{:.9f}".format(recover_scaler(Vals[i], maxv)))] = MT[cltrs]["menbers"][:]            if type_info == -1:                IsIter[idx[0], idx[1], idx[2]] = cltrs[0]                MT[cltrs[0]]["menbers"].append(get_idx_1D_from_3D(density, array, tuple(idx))[0])                for k in range(1, len(cltrs)):                    MT[cltrs[k]]["death"] = Vals[i]                    MT[cltrs[0]]["menbers"]=MT[cltrs[0]]["menbers"]+MT[cltrs[k]]["menbers"]                    IsIter = update_IsIter(IsIter, cltrs[k], cltrs[0])                    MT[cltrs[0]]["co-CC"][str("{:.9f}".format(recover_scaler(Vals[i], maxv)))] = MT[cltrs[0]]["menbers"][:]    cnt = 0    for i in range(0, len(MT)):        if MT[i]["birth"] != MT[i]["death"]:            MT[i]["id"] =cnt            cnt+=1    BARS={}    for i in range(0, len(MT)):        if MT[i]["birth"] != MT[i]["death"]:            MT[i]["co-CC"]["birth"]= "{:.9f}".format(recover_scaler(MT[i]['birth'], maxv))            if MT[i]["death"]==-9999:                MT[i]["co-CC"]["death"]=-99999            else:                MT[i]["co-CC"]["death"]= "{:.9f}".format(recover_scaler(MT[i]['death'], maxv))            BARS["bar-"+str(MT[i]["id"])] = MT[i]["co-CC"]    print("Writing json file now...")    json_file = os.path.join(PD_DIR, file_name+'_bars.json')    with open(json_file, 'w') as f:        json.dump(BARS, f)   if __name__ == '__main__':    #make_dir(PD_DIR)    generate_json_Bars(file_name)