from __future__ import divisionimport numpy as npimport cv2import osimport matplotlib.pyplot as pltfrom pyevtk.hl import pointsToVTKimport json## Real data:"""file_name = "real"x = 24y = 25z = 152"""##  Simulation data:"""file_name = "simulation"x = 24y = 27z = 115"""## Real-original data:file_name = "real-original2"x = 24y = 24z = 151## Real-shuffled data:"""file_name = "real-shuffled2"x = 24y = 24z = 151"""PRECISION=10**4DATA_DIR = "./raw_data"PD_DIR = "./PD"PLOT_DIR = "./Plot"def make_dir(new_dir):    if not os.path.exists(new_dir):        os.makedirs(new_dir)def generate_input_for_perseus(file_name):    input_file = os.path.join(DATA_DIR, "map-"+file_name+".bin")    xbash = np.fromfile(input_file, dtype=np.float64)    #print xbash.shape    minv = min(xbash)    maxv = max(xbash)    xbash = ((maxv-xbash)*PRECISION+1).astype(int)    mbash = xbash.reshape((x, y, z))        output_file = os.path.join(PD_DIR, 'SimTop-'+file_name+'.txt')    print maxv    print minv    try:        os.remove(output_file)    except OSError:        pass    file_PD = open(output_file, 'a')    file_PD.write("3\n")    for i in range(0, z):        for j in range(0, y):            for k in range(0, x):                new = '0 '+str(k)+' '+str(j) + ' '+ str(i) + ' ' + str(mbash[k, j, i])                file_PD.write(new+"\n")                if k+1<x:                    new = '1 '+str(k)+' '+str(j) + ' '+ str(i) + ' '+str(k+1) + ' '+str(j) + ' '+ str(i) + ' '+ str(max(mbash[k, j, i], mbash[k+1, j, i]))                    file_PD.write(new+"\n")                if j+1<y:                    new = '1 '+str(k)+' '+str(j) + ' '+ str(i) + ' '+str(k) + ' '+str(j+1) + ' '+ str(i) + ' '+ str(max(mbash[k, j, i], mbash[k, j+1, i]))                    file_PD.write(new+"\n")                if i+1<z:                    new = '1 '+str(k)+' '+str(j) + ' '+ str(i) + ' '+str(k) + ' '+str(j) + ' '+ str(i+1) + ' ' + str(max(mbash[k, j, i], mbash[k, j, i+1]))                    file_PD.write(new+"\n")    file_PD.close()     return maxvdef recover_scaler(n, maxv):    return maxv-(n-1)/PRECISIONdef get_idx_1D_from_3D(density, array, pos):    return np.unravel_index(np.ravel_multi_index(pos, density.shape),array.shape)def IsLocalMin(idx, M):    tmp = []    if idx[0]-1>=0:        if M[idx[0]-1, idx[1], idx[2]]>-1:            tmp.append(M[idx[0]-1, idx[1], idx[2]])    if idx[0]+1<x:        if M[idx[0]+1, idx[1], idx[2]]>-1:            tmp.append(M[idx[0]+1, idx[1], idx[2]])    if idx[1]-1>=0:        if M[idx[0], idx[1]-1, idx[2]]>-1:            tmp.append(M[idx[0], idx[1]-1, idx[2]])    if idx[1]+1<y:        if M[idx[0], idx[1]+1, idx[2]]>-1:            tmp.append(M[idx[0], idx[1]+1, idx[2]])    if idx[2]-1>=0:        if M[idx[0], idx[1], idx[2]-1]>-1:          tmp.append(M[idx[0], idx[1], idx[2]-1])    if idx[2]+1<z:        if M[idx[0], idx[1], idx[2]+1]>-1:            tmp.append(M[idx[0], idx[1], idx[2]+1])    if len(set(tmp))==0:        return [1, 0]    if len(set(tmp))==1:        return [0, tmp[0]]    else:        return [-1, sorted(list(set(tmp)))]def update_IsIter(M, m, n):    M[M==m]=n    return M    def generate_json_Bars(maxv,file_name):    input_file = os.path.join(DATA_DIR, "map-"+file_name+".bin")    xbash = np.fromfile(input_file, dtype=np.float64)    #print xbash.shape    minv = min(xbash)    maxv = max(xbash)    array = ((maxv-xbash)*PRECISION+1).astype(int)    density = array.reshape((x, y, z))    PD_file = os.path.join(PD_DIR, 'PD-'+file_name+'_0.txt')    PD = np.loadtxt(PD_file).astype(int)    Vals = list(sorted(set(list(array))))    IsIter = np.zeros((x, y, z)).astype(int)-1    MT=[]    CCcnt = 0    for i in range(0, len(Vals)):        print "-------"+str(i*100/len(Vals))+"---------------"        tmps = np.argwhere(density==Vals[i])        for j in range(0, len(tmps)):            idx = list(tmps[j])            type_info, cltrs = IsLocalMin(idx, IsIter)            if type_info == 1:                IsIter[idx[0], idx[1], idx[2]] = CCcnt                MT.append({"id": -1, "birth": Vals[i], "death": -1, "menbers": [get_idx_1D_from_3D(density, array, tuple(idx))[0]], "co-CC":{}})                MT[CCcnt]["co-CC"][str("{:.9f}".format(recover_scaler(Vals[i], maxv)))] = MT[CCcnt]["menbers"][:]                CCcnt += 1            if type_info == 0:                IsIter[idx[0], idx[1], idx[2]] = cltrs                MT[cltrs]["menbers"].append(get_idx_1D_from_3D(density, array, tuple(idx))[0])                MT[cltrs]["co-CC"][str("{:.9f}".format(recover_scaler(Vals[i], maxv)))] = MT[cltrs]["menbers"][:]            if type_info == -1:                IsIter[idx[0], idx[1], idx[2]] = cltrs[0]                MT[cltrs[0]]["menbers"].append(get_idx_1D_from_3D(density, array, tuple(idx))[0])                for k in range(1, len(cltrs)):                    MT[cltrs[k]]["death"] = Vals[i]                    MT[cltrs[0]]["menbers"]=MT[cltrs[0]]["menbers"]+MT[cltrs[k]]["menbers"]                    IsIter = update_IsIter(IsIter, cltrs[k], cltrs[0])                    MT[cltrs[0]]["co-CC"][str("{:.9f}".format(recover_scaler(Vals[i], maxv)))] = MT[cltrs[0]]["menbers"][:]    PD = PD.tolist()    cnt = 0    for i in range(0, len(MT)):        if MT[i]["birth"] != MT[i]["death"]:            MT[i]["id"] =PD.index([MT[i]["birth"], MT[i]["death"]])            PD[MT[i]["id"]][0]=-1    BARS={}    for i in range(0, len(MT)):        if MT[i]["birth"] != MT[i]["death"]:            MT[i]["co-CC"]["birth"]= "{:.9f}".format(recover_scaler(MT[i]['birth'], maxv))            if MT[i]["id"]==len(PD)-1:                MT[i]["co-CC"]["death"]=-99999            else:                MT[i]["co-CC"]["death"]= "{:.9f}".format(recover_scaler(MT[i]['death'], maxv))            BARS["bar-"+str(MT[i]["id"])] = MT[i]["co-CC"]    print "Writing json file now..."    json_file = os.path.join(PD_DIR, file_name+'_bars.json')    with open(json_file, 'w') as f:        json.dump(BARS, f)        def plot_barcode(file_name):    output_file = os.path.join(PLOT_DIR, 'barcode-'+file_name+'.png')    input_file = os.path.join(PD_DIR, 'PD-'+file_name+'_0_original.txt')    X = np.loadtxt(input_file)    minv = -20    fig = plt.figure(figsize=(8,8))    ax = fig.add_subplot(111)    X[len(X)-1, 1] = minv    print minv    plt.plot(X[len(X)-1], [1, 1], color = 'steelblue')    for i in range(0, len(X)-1):        plt.plot(X[len(X)-2-i], [i+2, i+2], color = 'steelblue')    ax.invert_xaxis()    plt.show()    fig.savefig(output_file)def convert_pd_file(maxv,file_name):    input_file = os.path.join(PD_DIR, 'PD-'+file_name+'_0.txt')    X = maxv-(np.loadtxt(input_file)-1)/PRECISION    output_file = os.path.join(PD_DIR, 'PD-'+file_name+'_0_original.txt')    np.savetxt(output_file, X, fmt="%f")      if __name__ == '__main__':    #make_dir(PD_DIR)    maxv = generate_input_for_perseus(file_name)    #Real_maxv: 0.7617797754006009    #Simulation_maxv: 2.8266570625743968    #Real-original_maxv: 47.287079179700285    #Real-original2_maxv:21.25608490269029    #Real-shuffled_maxv: 14.852802931305446    #Real-shuffled2_maxv: 18.164376069091897    maxv = 21.25608490269029          #perseus nmfsimtop SimTop.txt PD    #convert_pd_file(maxv, file_name)    #plot_barcode(file_name)    generate_json_Bars(maxv, file_name)